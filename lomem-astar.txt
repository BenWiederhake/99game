lomem-astar


struct IncrementalNode { u64 prev_index, u64 movenr_ish }

function A_Star(start, h)
    openSet := {start}  // stack
    openSet is BTreeMap<u64, Stack<IncrementalNode>>  // key is g+h
    closedSet := {}
    closedSet is Vector<IncrementalNode>
    seen := {}
    seen is HashMap<HashOfNodeState, (u64, u64)>  // (g+h or 0, offset)

    while openSet is not empty
        current := openSet.first().pop()  // a node in openSet having the lowest g+h value, ideally the last
        closedSet.append(current)
        current_gScore, current_fullstate = reconstruct_state(current, closedSet)
        if current_fullstate is a goal
            return reconstruct_path(current, )

        for action_id, (neighbor_fullstate, action_weight) in enumerate(current.neighbors):
            IncrementalNode neighbor = (current_id, action_id)
            if neighbor_fullstate is goal and have_uniform_cost:
                return reconstruct_path(neighbor, closed_set)
            upperbound_gScore := current_gScore + action_weight
            Option((u64, 64)) = seen.get(hash(neighbor_fullstate))
            if option is not None and is at least as good:
                continue
            Add into openSet
            update/insert into seen

    // Open set is empty but goal was never reached
    return failure

