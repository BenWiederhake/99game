Want to do A*.
The heuristic is actually quite good, this should work.

- enqueue this board
- dequeue the next board
- reconstruct this final thing

board only is the state
    # Assume at most 64 moves
    # Assume base at most 16 (including)
    # → two cells per byte
    # → 64 bytes?
md5 is 16 bytes
sha1 is 20 bytes

struct PrevBoard { u32 prev_index, u16(?) movedescr, u16 minmoves }
Vector<PrevBoard> closed;  // closed[0] is the start board, and has no meaningful content

Vector<PrevBoard> queue;  // For the current dead-line
// In order to iterate, it is swapped with an empty vector, so that new elements with the same deadline can be enqueued immediately.
// If afterwards, queue has elements, this is repeated until the queue is empty.
// If afterwards, queue is empty, use the next element from by_minmoves.

Set<BoardHash> seen  # BTreeSet (slower?) or HashSet (less efficient?)
BTreeMap<u8, Vector<PrevBoard>> by_minmoves  // must be BTreeMap, because need both random-access (enqueue) and min-element (dequeue)

- enqueue:
    Is it in seen?
        If yes, discard.
        If no, add.
    Compute minmoves.
        If less, abort()
        If same, queue.add()
        If larger, by_minmoves[minmoves].add()
- dequeue:
    


----

Old idea:

struct PrevBoard { u32 index, u32(?) movedescr }
    index==0 is the start-board
Vector<PrevBoard> all_boards
u32 first_open = 0
Map<BoardHash, u32> seen  # BTreeMap (slower?) or HashMap (less efficient?)

def reconstruct(index): look at all_baords[index], go backwards, apply forwards.

- was this board seen before?
    → seen.contains(board)
- how to arrive at this board?
    → reconstruct(seen[board])
- enqueue this board
    → seen[hash(board)] = all_baords.len(); all_boards.append(board)
- dequeue the next board
    → first_open += 1; return reconstruct(first_open - 1)
